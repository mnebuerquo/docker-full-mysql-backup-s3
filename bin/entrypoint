#!/bin/bash

MYSQL_PORT=${MYSQL_PORT:-3306}
FILENAME=${FILENAME:-backup}
# remove quotes - quotes are required to get through some env file contexts
BACKUP_WINDOW=$( echo "${BACKUP_WINDOW:-"0 6 * * * "}" | tr -d '"' )

sed 's,{{FILENAME}},'"${FILENAME}"',g' -i /backup/bin/cron-job
sed 's,{{AWS_ACCESS_KEY_ID}},'"${AWS_ACCESS_KEY_ID}"',g' -i /backup/bin/cron-job
sed 's,{{AWS_SECRET_ACCESS_KEY}},'"${AWS_SECRET_ACCESS_KEY}"',g' -i /backup/bin/cron-job
sed 's,{{BUCKET}},'"${BUCKET}"',g' -i /backup/bin/cron-job
sed 's,{{REGION}},'"${REGION}"',g' -i /backup/bin/cron-job
sed 's,{{MYSQL_HOST}},'"${MYSQL_HOST}"',g' -i /backup/bin/cron-job
sed 's,{{MYSQL_PORT}},'"${MYSQL_PORT}"',g' -i /backup/bin/cron-job
sed 's,{{MYSQL_USER}},'"${MYSQL_USER}"',g' -i /backup/bin/cron-job
sed 's,{{MYSQL_PASSWORD}},'"${MYSQL_PASSWORD}"',g' -i /backup/bin/cron-job

touch /var/log/cron.log;

if [ "$RESTORE_ON_START" ]; then
    /backup/bin/restore last.sql.gz
fi

# prevent duplicate jobs when restart containers
if crontab -l ; then
	echo "crontab already installed"
else
	echo "installing crontab"
	#(crontab -l 2> /dev/null ; echo "${BACKUP_WINDOW} /backup/bin/cron-job >> /var/log/cron.log 2>&1") 2>&1 | sort | uniq | crontab -
	(echo "${BACKUP_WINDOW} /backup/bin/cron-job >> /var/log/cron.log 2>&1") 2>&1 | sort | uniq | crontab -
fi

# run cron in background and show the output
cron;
tail -f /var/log/cron.log;
